#include <bits/stdc++.h>
#define ul unsigned int
#define uc unsigned char
using namespace std;

uc SBOX[256] =
    {
        // 0     1     2     3     4     5     6     7     8     9     a     b     c     d     e     f
        0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
        0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
        0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
        0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
        0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
        0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
        0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
        0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
        0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
        0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
        0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
        0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
        0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
        0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
        0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
        0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16};

uc INV_SBOX[256] =
    {
        // 0     1     2     3     4     5     6     7     8     9     a     b     c     d     e     f
        0x52, 0x09, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38, 0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB,
        0x7C, 0xE3, 0x39, 0x82, 0x9B, 0x2F, 0xFF, 0x87, 0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE, 0xE9, 0xCB,
        0x54, 0x7B, 0x94, 0x32, 0xA6, 0xC2, 0x23, 0x3D, 0xEE, 0x4C, 0x95, 0x0B, 0x42, 0xFA, 0xC3, 0x4E,
        0x08, 0x2E, 0xA1, 0x66, 0x28, 0xD9, 0x24, 0xB2, 0x76, 0x5B, 0xA2, 0x49, 0x6D, 0x8B, 0xD1, 0x25,
        0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xD4, 0xA4, 0x5C, 0xCC, 0x5D, 0x65, 0xB6, 0x92,
        0x6C, 0x70, 0x48, 0x50, 0xFD, 0xED, 0xB9, 0xDA, 0x5E, 0x15, 0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84,
        0x90, 0xD8, 0xAB, 0x00, 0x8C, 0xBC, 0xD3, 0x0A, 0xF7, 0xE4, 0x58, 0x05, 0xB8, 0xB3, 0x45, 0x06,
        0xD0, 0x2C, 0x1E, 0x8F, 0xCA, 0x3F, 0x0F, 0x02, 0xC1, 0xAF, 0xBD, 0x03, 0x01, 0x13, 0x8A, 0x6B,
        0x3A, 0x91, 0x11, 0x41, 0x4F, 0x67, 0xDC, 0xEA, 0x97, 0xF2, 0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73,
        0x96, 0xAC, 0x74, 0x22, 0xE7, 0xAD, 0x35, 0x85, 0xE2, 0xF9, 0x37, 0xE8, 0x1C, 0x75, 0xDF, 0x6E,
        0x47, 0xF1, 0x1A, 0x71, 0x1D, 0x29, 0xC5, 0x89, 0x6F, 0xB7, 0x62, 0x0E, 0xAA, 0x18, 0xBE, 0x1B,
        0xFC, 0x56, 0x3E, 0x4B, 0xC6, 0xD2, 0x79, 0x20, 0x9A, 0xDB, 0xC0, 0xFE, 0x78, 0xCD, 0x5A, 0xF4,
        0x1F, 0xDD, 0xA8, 0x33, 0x88, 0x07, 0xC7, 0x31, 0xB1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xEC, 0x5F,
        0x60, 0x51, 0x7F, 0xA9, 0x19, 0xB5, 0x4A, 0x0D, 0x2D, 0xE5, 0x7A, 0x9F, 0x93, 0xC9, 0x9C, 0xEF,
        0xA0, 0xE0, 0x3B, 0x4D, 0xAE, 0x2A, 0xF5, 0xB0, 0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61,
        0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6, 0x26, 0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0C, 0x7D};

// RCON TABLE   1      2     3    4     5     6     7     8     9     10
uc RCON[11] = {0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36};
//Start Decryption operation
void Inv_Round_key(uc *state, uc *key)
{
    for (int i = 0; i < 16; i++)
    {
        state[i] ^= key[i];
    }
}

void Inv_Shift_Row(uc *state)
{
    uc temp[16] = {0};
    int fst_shift = 0, snd_shift = 1;
    int trd_shift = 2, frth_shift = 3;
    // 1st column 0 shift
    for (int i = 0; i < 4; i++)
    {
        temp[fst_shift] = state[fst_shift % 16];
        fst_shift += 4;
    }
    //2nd column 1 shift
    for (int i = 0; i < 4; i++)
    {
        temp[snd_shift] = state[(snd_shift + 12) % 16];
        snd_shift += 4;
    }
    //3rd column 2 shift
    for (int i = 0; i < 4; i++)
    {
        temp[trd_shift] = state[(trd_shift + 8) % 16];
        trd_shift += 4;
    }
    //4rth column 3 shift
    for (int i = 0; i < 4; i++)
    {
        temp[frth_shift] = state[(frth_shift + 4) % 16];
        frth_shift += 4;
    }
    //Update state matrix
    for (int i = 0; i < 16; i++)
    {
        state[i] = temp[i];
    }
}

void Inv_SUBBYTE(uc *state)
{
    for (int i = 0; i < 16; i++) //Perform subbyte with Inverse SBox table
    {
        state[i] = INV_SBOX[state[i]];
    }
}
uc Multiply(uc a, uc b)
{
    uc p = 0; //Product of multiplication
    while (a && b)
    {
        if (b & 1) // If b odd,then add the corresponding a to p
        {
            p ^= a;
        }
        if (a & 0x80) //GF modulo: if a >= 128,then it will overflow when shifted left
        {
            a = (a << 1) ^ 0x1b;
        }
        else
        {
            a <<= 1; /* equivalent to a*2 */
        }
        b >>= 1; /* equivalent to b // 2 */
    }
    return p;
}
void Inv_Mix_Column(uc *state)
{
    uc s1[4] = {0};
    uc temp[4] = {0};
    int k = 0, p = 0;
    for (int i = 0; i < 4; i++)
    {
        for (int j = 0; j < 4; j++)
        {
            temp[j] = state[k];
            k++;
        }
        s1[0] = (uc)(Multiply(0x0e, temp[0])) ^ (Multiply(0x0b, temp[1])) ^ (Multiply(0x0d, temp[2])) ^ (Multiply(0x09, temp[3]));
        s1[1] = (uc)(Multiply(0x09, temp[0])) ^ (Multiply(0x0e, temp[1])) ^ (Multiply(0x0b, temp[2])) ^ (Multiply(0x0d, temp[3]));
        s1[2] = (uc)(Multiply(0x0d, temp[0])) ^ (Multiply(0x09, temp[1])) ^ (Multiply(0x0e, temp[2])) ^ (Multiply(0x0b, temp[3]));
        s1[3] = (uc)(Multiply(0x0b, temp[0])) ^ (Multiply(0x0d, temp[1])) ^ (Multiply(0x09, temp[2])) ^ (Multiply(0x0e, temp[3]));
        for (int j = 0; j < 4; j++)
        {
            state[p] = s1[j];
            p++;
        }
    }
}

void Decryption(uc *enc_msg, uc *Anotherkeys, uc *dec_msg)
{
    uc state[16];
    for (int i = 0; i < 16; i++)
    {
        state[i] = enc_msg[i];
    }
    Inv_Round_key(state, Anotherkeys + 160); //Initial Round
    Inv_Shift_Row(state);                    //Initial Round
    Inv_SUBBYTE(state);                      //Initial Round
    //Main Round
    for (int i = 8; i >= 0; i--)
    {
        Inv_Round_key(state, Anotherkeys + (16 * (i + 1)));
        Inv_Mix_Column(state);
        Inv_Shift_Row(state);
        Inv_SUBBYTE(state);
    }

    Inv_Round_key(state, Anotherkeys);
    //copy decrypted message to Array
    for (int i = 0; i < 16; i++)
    {
        dec_msg[i] = state[i];
    }
}

//For key generation process that I did in encryption
void Rot_Word(uc *rot)
{
    uc p = rot[0];
    rot[0] = rot[1];
    rot[1] = rot[2];
    rot[2] = rot[3];
    rot[3] = p;
}
void Sub_byte_and_rcon(uc *sub, int count)
{
    for (int i = 0; i < 4; i++)
    {
        sub[i] = SBOX[sub[i]];
    }
    sub[0] ^= RCON[count];
}

void Expand_keys(uc key_required[16], uc Another_keys[176])
{
    for (int i = 0; i < 16; i++)
    {
        Another_keys[i] = key_required[i];
    }
    int rcon = 0;
    int first_round = 16;
    uc temp[4];
    while (first_round < 176)
    {
        // Last 4 byte of key copied to temp array
        temp[0] = Another_keys[first_round - 4 + 0];
        temp[1] = Another_keys[first_round - 4 + 1];
        temp[2] = Another_keys[first_round - 4 + 2];
        temp[3] = Another_keys[first_round - 4 + 3];

        if (first_round % 16 == 0) //for 11 times do the following process (under if block)
        {
            Rot_Word(temp);
            Sub_byte_and_rcon(temp, rcon); //Do the subbyte and rcon
            rcon++;
        }
        Another_keys[first_round + 0] = (Another_keys[first_round - 16] ^ temp[0]);
        Another_keys[first_round + 1] = (Another_keys[first_round + 1 - 16] ^ temp[1]);
        Another_keys[first_round + 2] = (Another_keys[first_round + 2 - 16] ^ temp[2]);
        Another_keys[first_round + 3] = (Another_keys[first_round + 3 - 16] ^ temp[3]);
        first_round += 4;
    }
}

int main()
{
    string msg;
    ifstream read_file;
    read_file.open("encrypt");
    if (read_file.is_open())
    {
        getline(read_file, msg);
        read_file.close();
    }
    else
    {
        cout << "Unable to Open file";
    }
    int size = msg.size();
    // char cpy[size];
    // strcpy(cpy, msg.c_str());
    // int p = strlen(cpy);
    uc enc_msg[size];
    for (int i = 0; i < size; i++)
    {
        enc_msg[i] = (unsigned char)msg[i];
    }
    // for (int i = 0; i < 16; i++)
    // {
    //     cout << setfill('0') << setw(2) << hex << (int)enc_msg[i] << uppercase;
    //     cout << " ";
    // }
    cout << endl;
    //Read the key
    string h_key;
    ifstream read_key;
    read_key.open("keystore");
    if (read_key.is_open())
    {
        getline(read_key, h_key);
        read_key.close();
    }
    else
    {
        cout << "Unable to open file";
    }
    istringstream hex_conv(h_key);
    uc key[16];
    int i = 0;
    ul q;
    while (hex_conv >> hex >> q)
    {
        key[i] = q;
        i++;
    }
    uc Anotherkeys[176];
    Expand_keys(key, Anotherkeys); //function which generate 11 round key

    uc dec_msg[size];
    if (size == 16)
    {
        Decryption(enc_msg, Anotherkeys, dec_msg);
        cout << "Decrypted Message in Hex: " << endl;
        for (int i = 0; i < 16; i++)
        {
            cout << setfill('0') << setw(2) << hex << (int)dec_msg[i] << uppercase;
            cout << " ";
        }
        cout << endl;
        cout << "Message is: ";
        for (int i = 0; i < 16; i++)
        {
            cout << dec_msg[i];
        }
    }
    else
    {
        cout << "Message is not 16 bit Encrypt 16 bit message and try again.....";
        exit(0);
    }
}